// ========== SISTEMA DE VERIFICA√á√ÉO DE PERMISS√ïES ==========
// Este arquivo implementa o controle de acesso baseado em permiss√µes
// Definidas na tabela permissoes_portal do Supabase

// Vari√°vel global para o Supabase (compartilhada entre pages)
if (!window.supabaseClient) {
    window.supabaseClient = null;
}

/**
 * Verifica se o usu√°rio atual √© admin
 * @returns {Object|false} - Dados do usu√°rio se for admin, false caso contr√°rio
 */
function isUserAdmin() {
    try {
        const loggedInUserData = localStorage.getItem('loggedInUser');
        if (!loggedInUserData) {
            console.log('‚ùå Nenhum usu√°rio logado');
            return false;
        }
        
        const userData = JSON.parse(loggedInUserData);
        
        // Verifica√ß√£o rigorosa de admin
        const isAdmin = (userData.isAdmin === true || userData.role === 'admin');
        
        console.log('üë§ Verificando se √© admin:', {
            email: userData.email,
            isAdmin: userData.isAdmin,
            role: userData.role,
            isAdminCheck: isAdmin
        });
        
        if (isAdmin) {
            console.log('‚úÖ Usu√°rio √© ADMIN');
            return userData;
        }
        
        return false;
    } catch (error) {
        console.error('‚ùå Erro ao verificar se √© admin:', error);
        return false;
    }
}

/**
 * Inicializa o cliente Supabase
 */
async function initSupabaseForPermissions() {
    // Se j√° existe um cliente compartilhado, usar ele
    if (window.supabaseClient) {
        console.log('‚úÖ Usando Supabase j√° inicializado');
        return window.supabaseClient;
    }
    
    try {
        const response = await fetch('/api/supabase-config');
        if (!response.ok) throw new Error('Erro ao buscar configura√ß√µes');
        
        const config = await response.json();
        
        // Verificar se window.supabase existe (library carregada)
        if (typeof window.supabase === 'undefined') {
            console.error('‚ùå Biblioteca @supabase/supabase-js n√£o carregada');
            return null;
        }
        
        window.supabaseClient = window.supabase.createClient(config.supabaseUrl, config.supabaseAnonKey);
        
        console.log('‚úÖ Supabase inicializado para verifica√ß√µes de permiss√µes');
        return window.supabaseClient;
    } catch (error) {
        console.error('‚ùå Erro ao inicializar Supabase:', error);
        return null;
    }
}

/**
 * Verifica se o usu√°rio tem permiss√£o para acessar uma p√°gina espec√≠fica
 * @param {string} pageName - Nome da p√°gina (ex: 'painel', 'coletas', 'cadastro', 'relatorios')
 * @returns {Promise<boolean>} - true se tem permiss√£o, false caso contr√°rio
 */
async function verificarPermissaoPagina(pageName) {
    try {
        console.log(`üîê Verificando permiss√£o para p√°gina: ${pageName}`);
        
        // Buscar usu√°rio logado
        const loggedInUserData = localStorage.getItem('loggedInUser');
        if (!loggedInUserData) {
            console.log('‚ùå Nenhum usu√°rio logado encontrado');
            return false;
        }
        
        const userData = JSON.parse(loggedInUserData);
        console.log('üë§ Usu√°rio verificando permiss√£o:', userData.email);
        console.log('üìä Dados do usu√°rio:', {
            id: userData.id,
            email: userData.email,
            isAdmin: userData.isAdmin,
            role: userData.role
        });
        
        // ‚úÖ Se for ADMIN, permite acesso a tudo
        const isAdminCheck = (userData.isAdmin === true) || (userData.role === 'admin');
        
        if (isAdminCheck) {
            console.log('‚úÖ Usu√°rio √© ADMIN, permiss√£o concedida para:', pageName);
            return true;
        }
        
        console.log('‚ö†Ô∏è Usu√°rio N√ÉO √© admin, verificando permiss√µes espec√≠ficas...');
        
        // Inicializar Supabase
        const client = await initSupabaseForPermissions();
        if (!client) {
            console.error('‚ùå Supabase n√£o dispon√≠vel');
            return false; // Por seguran√ßa, nega acesso se Supabase n√£o estiver dispon√≠vel
        }
        
        console.log('üì° Buscando permiss√µes do usu√°rio no Supabase...');
        
        // Buscar permiss√µes do usu√°rio
        const { data, error } = await client
            .from('permissoes_portal')
            .select('permissao_id, tipo')
            .eq('usuario_id', userData.id);
        
        if (error) {
            console.error('‚ùå Erro ao buscar permiss√µes:', error);
            return false; // Por seguran√ßa, nega acesso em caso de erro
        }
        
        console.log('üìã Permiss√µes encontradas:', data);
        
        // Extrair apenas os IDs de permiss√£o (independente do tipo)
        const permissoes = (data || []).map(p => p.permissao_id);
        console.log('üìã IDs de permiss√µes do usu√°rio:', permissoes);
        
        // Mapear nomes de p√°ginas para IDs de permiss√£o
        const pagePermissionsMap = {
            // Opera√ß√µes
            'painel': 'operacoes',
            'coletas': 'coletas',
            'monitoramento': 'monitoramento',
            
            // Comercial
            'comercial': 'comercial',
            'crm': 'crm',
            'vendas': 'vendas',
            
            // Gest√£o
            'cadastro': 'cadastro',
            'relatorios': 'relatorios',
            
            // Financeiro
            'contas-pagar': 'contas-pagar',
            'contas-receber': 'contas-receber',
            
            // Recursos Humanos
            'folha': 'folha',
            'recrutamento': 'recrutamento',
            
            // Configura√ß√µes
            'settings': 'configuracoes'
        };
        
        const requiredPermission = pagePermissionsMap[pageName];
        console.log(`üîç Permiss√£o requerida para ${pageName}:`, requiredPermission);
        
        if (!requiredPermission) {
            console.log(`‚ö†Ô∏è P√°gina ${pageName} n√£o tem mapeamento de permiss√£o definido`);
            // Para p√°ginas sem mapeamento definido, NEGA acesso por seguran√ßa
            console.log('‚ùå Acesso negado: p√°gina sem mapeamento de permiss√£o');
            return false;
        }
        
        const temPermissao = permissoes.includes(requiredPermission);
        console.log(`üîë Usu√°rio tem a permiss√£o '${requiredPermission}' para ${pageName}:`, temPermissao);
        console.log(`üìù Resumo: permissoes[${permissoes.length}] inclui '${requiredPermission}'?`, temPermissao);
        
        return temPermissao;
        
    } catch (error) {
        console.error('‚ùå Erro ao verificar permiss√£o:', error);
        return false; // Por seguran√ßa, nega acesso em caso de erro
    }
}

/**
 * Verifica permiss√£o e redireciona o usu√°rio se n√£o tiver acesso
 * @param {string} pageName - Nome da p√°gina
 */
async function verificarEAplicarPermissao(pageName) {
    console.log(`üîê VERIFICAR EA APLICAR PERMISS√ÉO para ${pageName}`);
    
    const temPermissao = await verificarPermissaoPagina(pageName);
    console.log(`üìä RESULTADO DA VERIFICA√á√ÉO: ${temPermissao}`);
    
    if (!temPermissao) {
        console.log(`‚ùå Acesso negado para ${pageName}`);
        console.log(`‚ùå Redirecionando para portal.html`);
        
        // Mostrar mensagem de erro amig√°vel
        alert(`Acesso Negado\n\nVoc√™ n√£o tem permiss√£o para acessar esta p√°gina. Por favor, entre em contato com o administrador para solicitar acesso.\n\nP√°gina: ${pageName}`);
        
        // Redirecionar para portal
        window.location.href = 'portal.html';
        
        return false;
    }
    
    console.log(`‚úÖ Acesso permitido para ${pageName}`);
    return true;
}

/**
 * P√°gina dispon√≠vel para o usu√°rio
 * @param {string} pageName - Nome da p√°gina
 * @returns {Promise<boolean>}
 */
async function paginaDisponivel(pageName) {
    return await verificarPermissaoPagina(pageName);
}

// Exportar fun√ß√µes para uso global
window.verificarPermissaoPagina = verificarPermissaoPagina;
window.verificarEAplicarPermissao = verificarEAplicarPermissao;
window.paginaDisponivel = paginaDisponivel;
window.isUserAdmin = isUserAdmin;

console.log('‚úÖ Sistema de verifica√ß√£o de permiss√µes carregado');

